package com.facebook.ads.internal.protocol;

/* loaded from: assets/audience_network.dex */
public enum AdErrorType {
    UNKNOWN_ERROR(-1, A00(766, 13, 27), false),
    NETWORK_ERROR(1000, A00(2267, 13, 71), true),
    NO_FILL(1001, A00(1284, 7, 38), true),
    LOAD_TOO_FREQUENTLY(1002, A00(1320, 31, 28), true),
    DISABLED_APP(1005, A00(1924, 39, 119), true),
    SERVER_ERROR(2000, A00(675, 12, 114), true),
    INTERNAL_ERROR(2001, A00(2135, 14, 14), true),
    CACHE_FAILURE_ERROR(2002, A00(931, 19, 76), true),
    START_BEFORE_INIT(2005, A00(1388, 36, 74), true),
    REMOTE_ADS_SERVICE_ERROR(2008, A00(950, 25, 93), true),
    INTERSTITIAL_AD_TIMEOUT(2009, A00(687, 31, 75), true),
    RV_AD_TIMEOUT(2010, A00(816, 33, 45), true),
    BROKEN_MEDIA_ERROR(2100, A00(67, 34, 5), true),
    AD_REQUEST_FAILED(1111, A00(1081, 39, 93), false),
    AD_REQUEST_TIMEOUT(1112, A00(342, 42, 59), false),
    PARSER_FAILURE(1201, A00(510, 50, 52), false),
    UNKNOWN_RESPONSE(1202, A00(2061, 47, 54), false),
    ERROR_MESSAGE(1203, A00(2219, 48, 21), true),
    NO_AD_PLACEMENT(1302, A00(615, 42, 78), false),
    MEDIATION_ERROR(3001, A00(1224, 15, 6), true),
    BID_IMPRESSION_MISMATCH(4001, A00(187, 36, 77), true),
    BID_PAYLOAD_ERROR(4002, A00(1027, 19, 62), false),
    NO_ADAPTER_ON_LOAD(5001, A00(791, 25, 123), false),
    NO_ADAPTER_ON_START(5002, A00(1258, 26, 7), false),
    INTERSTITIAL_CONTROLLER_IS_NULL(5003, A00(1172, 39, 42), false),
    WEB_VIEW_FAILED_TO_LOAD(5004, A00(384, 22, 14), false),
    NO_MEDIAVIEW_IN_NATIVEAD(6001, A00(1986, 32, 68), true),
    NO_ICONVIEW_IN_NATIVEBANNERAD(6002, A00(0, 37, 78), true),
    UNSUPPORTED_AD_ASSET_NATIVEAD(6003, A00(2190, 29, 117), true),
    AD_ALREADY_STARTED(7001, A00(1462, 18, 87), true),
    LOAD_CALLED_WHILE_SHOWING_AD(7002, A00(423, 41, 37), true),
    CLEAR_TEXT_SUPPORT_NOT_ALLOWED(7003, A00(1547, 343, 50), true),
    INCORRECT_STATE_ERROR(7004, A00(1511, 36, 15), true),
    MISSING_DEPENDENCIES_ERROR(7005, A00(2280, 178, 126), true),
    API_NOT_SUPPORTED(7006, A00(267, 75, 32), true),
    NATIVE_AD_IS_NOT_LOADED(7007, A00(101, 86, 69), true),
    INCORRECT_API_CALL_ERROR(7008, A00(2108, 27, 53), true),
    IMAGE_CACHE_ERROR(8001, A00(1151, 21, 74), false),
    LOAD_AD_CALLED_MORE_THAN_ONCE(8002, A00(1424, 38, 116), true);

    public static byte[] A03;
    public final int A00;
    public final String A01;
    public final boolean A02;

    /* JADX WARN: Code restructure failed: missing block: B:18:0x0030, code lost:            return new java.lang.String(r2);     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public static java.lang.String A00(int r2, int r3, int r4) {
        /*
            r0 = 0
            r0 = 0
            byte[] r1 = com.facebook.ads.internal.protocol.AdErrorType.A03
            int r0 = r2 + r3
            byte[] r2 = java.util.Arrays.copyOfRange(r1, r2, r0)
            r1 = 0
            r0 = 2
        Lc:
            switch(r0) {
                case 2: goto L10;
                case 3: goto L19;
                case 4: goto L27;
                default: goto Lf;
            }
        Lf:
            goto Lc
        L10:
            byte[] r2 = (byte[]) r2
            int r0 = r2.length
            if (r1 >= r0) goto L17
            r0 = 3
            goto Lc
        L17:
            r0 = 4
            goto Lc
        L19:
            byte[] r2 = (byte[]) r2
            r0 = r2[r1]
            int r0 = r0 - r4
            int r0 = r0 + (-91)
            byte r0 = (byte) r0
            r2[r1] = r0
            int r1 = r1 + 1
            r0 = 2
            goto Lc
        L27:
            byte[] r2 = (byte[]) r2
            java.lang.String r0 = new java.lang.String
            r0.<init>(r2)
            java.lang.String r0 = (java.lang.String) r0
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.facebook.ads.internal.protocol.AdErrorType.A00(int, int, int):java.lang.String");
    }

    public static void A01() {
        A03 = new byte[]{-14, 12, 24, 23, -1, 18, 14, 32, -55, 18, 28, -55, 22, 18, 28, 28, 18, 23, 16, -55, 18, 23, -55, -9, 10, 29, 18, 31, 14, -21, 10, 23, 23, 14, 27, -22, 13, -50, -41, -48, -52, -35, -22, -33, -48, -29, -33, -22, -34, -32, -37, -37, -38, -35, -33, -22, -39, -38, -33, -22, -52, -41, -41, -38, -30, -48, -49, -90, -63, -55, -52, -59, -60, Byte.MIN_VALUE, -44, -49, Byte.MIN_VALUE, -52, -49, -63, -60, Byte.MIN_VALUE, -83, -59, -60, -55, -63, Byte.MIN_VALUE, -58, -49, -46, Byte.MIN_VALUE, -82, -63, -44, -55, -42, -59, Byte.MIN_VALUE, -95, -60, -31, 4, -64, 9, 19, -64, 14, 15, 20, -64, 12, 15, 1, 4, 5, 4, -50, -64, -19, 1, 11, 5, -64, 19, 21, 18, 5, -64, 20, 8, 1, 20, -64, 25, 15, 21, -64, 3, 1, 12, 12, -64, 12, 15, 1, 4, -31, 4, -56, -55, -64, 2, 5, 6, 15, 18, 5, -64, 18, 5, 7, 9, 19, 20, 5, 18, -10, 9, 5, 23, -26, 15, 18, -23, 14, 20, 5, 18, 1, 3, 20, 9, 15, 14, -56, -55, -22, 17, 12, -56, 24, 9, 33, 20, 23, 9, 12, -56, 12, 23, 13, 27, -56, 22, 23, 28, -56, 21, 9, 28, 11, 16, -56, 24, 20, 9, 11, 13, 21, 13, 22, 28, -28, -37, -22, -19, -27, -24, -31, -11, -37, -24, -24, -27, -24, 10, 2, 1, 6, -2, 17, 6, 12, 11, 28, 2, 15, 15, 12, 15, -49, -56, -59, -56, -55, -47, -56, -39, -52, -65, -51, -54, -55, -56, -51, -65, -63, -36, -34, -32, -35, -22, -22, -26, -101, -68, -16, -33, -28, -32, -23, -34, -32, -101, -55, -32, -17, -14, -22, -19, -26, -101, -50, -65, -58, -101, -33, -22, -32, -18, -23, -94, -17, -101, -18, -16, -21, -21, -22, -19, -17, -101, -68, -23, -33, -19, -22, -28, -33, -101, -54, -50, -101, -15, -32, -19, -18, -28, -22, -23, -18, -101, -35, -32, -25, -22, -14, -101, -81, -87, -83, -36, -9, -7, -5, -8, 5, 5, 1, -74, -41, -6, 9, -74, -23, -38, -31, -74, 8, -5, 7, 11, -5, 9, 10, -74, -4, 5, 8, -74, -9, -6, 9, -74, 10, -1, 3, -5, -6, -74, 5, 11, 10, -64, -50, -53, -65, -46, -50, -32, -119, -49, -54, -46, -43, -50, -51, -119, -35, -40, -119, -43, -40, -54, -51, 17, 32, 25, 47, 30, 31, 36, 47, 35, 37, 32, 32, 31, 34, 36, 21, 20, -63, -28, -96, -29, -31, -18, -18, -17, -12, -96, -30, -27, -96, -20, -17, -31, -28, -27, -28, -96, -9, -24, -23, -20, -27, -96, -30, -27, -23, -18, -25, -96, -28, -23, -13, -16, -20, -31, -7, -27, -28, 8, 9, 25, 0, 3, 6, 6, -78, -91, -83, -81, -76, -91, -65, -95, -92, -77, -65, -77, -91, -78, -74, -87, -93, -91, -65, -91, -78, -78, -81, -78, -23, -22, -6, -36, -33, -6, -21, -25, -36, -34, -32, -24, -32, -23, -17, -43, -16, -8, -5, -12, -13, -81, 3, -2, -81, -1, -16, 1, 2, -12, -81, -43, -16, -14, -12, -15, -2, -2, -6, -81, -48, -13, 2, -81, -30, -45, -38, -81, -13, -12, -5, -8, 5, -12, 1, 8, -81, 1, -12, 2, -1, -2, -3, 2, -12, -38, -42, -32, -32, -42, -37, -44, -20, -47, -46, -35, -46, -37, -47, -46, -37, -48, -42, -46, -32, -20, -46, -33, -33, -36, -33, -18, -25, -20, -18, -23, -23, -24, -21, -19, -34, -35, -8, -38, -35, -8, -38, -20, -20, -34, -19, -8, -25, -38, -19, -30, -17, -34, -38, -35, -17, 10, 12, 14, 11, 24, 24, 20, -55, -22, 13, 28, -55, -4, -19, -12, -55, 27, 14, 29, 30, 27, 23, 14, 13, -55, 23, 24, -55, 10, 13, -55, 25, 21, 10, 12, 14, 22, 14, 23, 29, 28, 8, 11, 38, 25, 12, 24, 28, 12, 26, 27, 38, 27, 16, 20, 12, 22, 28, 27, 32, 50, 63, 67, 50, 63, -19, 18, 63, 63, 60, 63, -6, 15, 19, 11, 21, 27, 26, -58, 18, 21, 7, 10, 15, 20, 13, -58, -17, 20, 26, 11, 24, 25, 26, 15, 26, 15, 7, 18, -58, -25, 10, -6, -3, 24, 11, -2, 10, 14, -2, 12, 13, 24, -1, -6, 2, 5, -2, -3, -51, -66, -49, -48, -62, -49, -36, -61, -66, -58, -55, -46, -49, -62, 18, 19, 0, 17, 19, 30, 1, 4, 5, 14, 17, 4, 30, 8, 13, 8, 19, -21, -28, -31, -28, -27, -19, -28, -106, -37, -24, -24, -27, -24, -34, -48, -35, -31, -48, -35, -22, -48, -35, -35, -38, -35, 23, 58, 55, 70, 74, 59, 72, -10, 63, 73, -10, 68, 75, 66, 66, -10, 69, 68, 34, 69, 55, 58, -10, 23, 58, -36, -15, -11, -19, -9, -3, -4, -88, -12, -9, -23, -20, -15, -10, -17, -88, -38, -19, -1, -23, -6, -20, -19, -20, -88, -34, -15, -20, -19, -9, -88, -55, -20, -87, -82, -93, -81, -78, -78, -91, -93, -76, -65, -77, -76, -95, -76, -91, -65, -91, -78, -78, -81, -78, -46, -43, -57, -54, -27, -55, -57, -46, -46, -53, -54, -27, -35, -50, -49, -46, -53, -27, -39, -50, -43, -35, -49, -44, -51, -27, -57, -54, 12, 17, 23, 8, 21, 17, 4, 15, 34, 8, 21, 21, 18, 21, -1, 2, -12, -9, 18, 7, 2, 2, 18, -7, 5, -8, 4, 8, -8, 1, 7, -1, 12, -9, 25, 12, -57, -22, 8, 10, 15, 16, 21, 14, -57, 13, 8, 16, 19, 28, 25, 12, -7, 28, 43, -40, 11, 29, 42, 46, 33, 27, 29, -40, 40, 42, 39, 27, 29, 43, 43, -40, 29, 42, 42, 39, 42, 22, 23, 39, 17, 11, 23, 22, 30, 17, 13, 31, 39, 17, 22, 39, 22, 9, 28, 17, 30, 13, 10, 9, 22, 22, 
        13, 26, 9, 12, -35, -28, -33, -6, -28, -24, -21, -19, -32, -18, -18, -28, -22, -23, -6, -24, -28, -18, -24, -36, -17, -34, -29, -30, 7, 15, -6, 5, 2, -3, -71, -5, 2, -3, -71, 9, -6, 18, 5, 8, -6, -3, -8, -3, 7, -11, -10, 0, -7, -8, 19, -11, 4, 4, 39, 21, 18, 47, 38, 25, 21, 39, 47, 22, 17, 25, 28, 21, 20, 47, 36, 31, 47, 28, 31, 17, 20, -2, 25, 27, 29, 26, 39, 39, 35, -40, -7, 28, 43, -40, 11, -4, 3, -40, 42, 29, 41, 45, 29, 43, 44, -40, 30, 39, 42, -40, 25, 28, 43, -40, 30, 25, 33, 36, 29, 28, -41, -40, -24, -54, -51, -54, -39, -35, -50, -37, -24, -40, -41, -24, -43, -40, -54, -51, -69, -65, -56, -86, -83, -56, -67, -78, -74, -82, -72, -66, -67, -21, 6, 14, 17, 10, 9, -59, 25, 20, -59, 8, 6, 8, 13, 10, -59, 14, 18, 6, 12, 10, -50, -13, -7, -22, -9, -8, -7, -18, -7, -18, -26, -15, -91, -56, -12, -13, -7, -9, -12, -15, -15, -22, -9, -91, -18, -8, -91, -13, -6, -15, -15, -91, -8, -19, -12, -4, -91, -58, -23, 28, 41, 41, 38, 41, 54, 36, 28, 42, 42, 24, 30, 28, -82, -58, -59, -54, -62, -43, -54, -48, -49, -127, -90, -45, -45, -48, -45, -79, -78, -62, -92, -89, -92, -77, -73, -88, -75, -62, -78, -79, -62, -74, -73, -92, -75, -73, -93, -58, -61, -46, -42, -57, -44, -126, -53, -43, -126, -48, -41, -50, -50, -126, -47, -48, -75, -42, -61, -44, -42, -126, -93, -58, -49, -16, -95, -57, -22, -19, -19, -17, -14, -28, -25, 2, -28, -25, 2, -26, -28, -17, -17, -24, -25, 2, -16, -14, -11, -24, 2, -9, -21, -28, -15, 2, -14, -15, -26, -24, -72, -37, -105, -18, -40, -22, -105, -23, -36, -92, -29, -26, -40, -37, -36, -37, -105, -21, -26, -26, -105, -35, -23, -36, -24, -20, -36, -27, -21, -29, -16, -45, -44, -28, -46, -54, -55, -50, -58, -37, -50, -54, -36, -28, -50, -45, -28, -45, -58, -39, -50, -37, -54, -58, -55, -51, -58, -61, -58, -57, -49, -58, -41, -67, -54, -54, -57, -54, 14, 19, 14, 25, -26, 9, -59, 18, 26, 24, 25, -59, 7, 10, -59, 8, 6, 17, 17, 10, 9, -59, 7, 10, 11, 20, 23, 10, -59, 24, 25, 6, 23, 25, -26, 9, 27, 62, 48, 51, 16, 51, -17, 50, 48, 61, 61, 62, 67, -17, 49, 52, -17, 50, 48, 59, 59, 52, 51, -17, 60, 62, 65, 52, -17, 67, 55, 48, 61, -17, 62, 61, 50, 52, -13, 22, -46, 19, 30, 36, 23, 19, 22, 43, -46, 37, 38, 19, 36, 38, 23, 22, -72, -67, -61, -76, -63, -62, -61, -72, -61, -72, -80, -69, -50, -78, -66, -67, -61, -63, -66, -69, -69, -76, -63, -50, -72, -62, -50, -67, -60, -69, -69, -61, -39, -33, -118, -51, -53, -40, -111, -34, -118, -51, -53, -42, -42, -118, -113, -35, -118, -48, -39, -36, -118, -53, -50, -118, -45, -40, -118, -35, -34, -53, -34, -49, -118, -113, -35, -42, -5, -83, -4, -1, -15, -14, -1, -83, 1, -4, -83, 2, 0, -14, -83, -16, -18, -16, -11, -14, -83, -10, -5, -83, -45, -18, -16, -14, -17, -4, -4, -8, -83, -50, 2, -15, -10, -14, -5, -16, -14, -83, -37, -14, 1, 4, -4, -1, -8, -83, -32, -47, -40, -83, 6, -4, 2, -83, 0, -11, -4, 2, -7, -15, -83, 4, -11, -10, 1, -14, -7, -10, 0, 1, -83, -66, -65, -60, -69, -67, -69, -67, -69, -66, -83, -10, -5, -83, 6, -4, 2, -1, -83, -37, -14, 1, 4, -4, -1, -8, -83, -32, -14, -16, 2, -1, -10, 1, 6, -83, -48, -4, -5, -13, -10, -12, 2, -1, -18, 1, -10, -4, -5, -57, -105, -55, -15, -4, -6, -18, -10, -5, -70, -16, -4, -5, -13, -10, -12, -83, -16, -7, -14, -18, -1, 1, -14, 5, 1, -31, -1, -18, -13, -13, -10, -16, -35, -14, -1, -6, -10, 1, 1, -14, -15, -54, -81, 1, -1, 2, -14, -81, -53, -105, -83, -83, -83, -83, -55, -15, -4, -6, -18, -10, -5, -83, -10, -5, -16, -7, 2, -15, -14, -32, 2, -17, -15, -4, -6, -18, -10, -5, 0, -54, -81, 1, -1, 2, -14, -81, -53, -66, -65, -60, -69, -67, -69, -67, -69, -66, -55, -68, -15, -4, -6, -18, -10, -5, -53, -105, -55, -68, -15, -4, -6, -18, -10, -5, -70, -16, -4, -5, -13, -10, -12, -53, -105, -32, -14, -14, -83, -6, -4, -1, -14, -57, -83, -11, 1, 1, -3, 0, -57, -68, -68, -15, -14, 3, -14, -7, -4, -3, -14, -1, 0, -69, -13, -18, -16, -14, -17, -4, -4, -8, -69, -16, -4, -6, -68, -15, -4, -16, 0, -68, -18, 2, -15, -10, -14, -5, -16, -14, -70, -5, -14, 1, 4, -4, -1, -8, -68, -18, -5, -15, -1, -4, -10, -15, -70, -5, -14, 1, 4, -4, -1, -8, -70, 0, -14, -16, 2, -1, -10, 1, 6, -70, -16, -4, -5, -13, -10, -12, -12, -5, -10, 17, 2, -13, 11, -2, 1, -13, -10, 17, -9, 4, 4, 1, 4, 3, 7, -5, 1, -1, 25, -3, -5, -3, 2, -1, 25, -1, 12, 12, 9, 12, 19, 66, 66, -14, 59, 69, -14, 54, 59, 69, 51, 52, 62, 55, 54, -14, 56, 68, 65, 63, -14, 63, 51, 61, 59, 64, 57, -14, 51, 54, -14, 68, 55, 67, 71, 55, 69, 70, 69, -57, -52, -46, -61, -48, -47, -46, -57, -46, -57, -65, -54, -35, -65, -62, -35, -46, -57, -53, -61, -51, -45, -46, -20, 4, 3, 8, 0, -11, 8, 4, 22, -65, 8, 18, -65, 12, 
        8, 18, 18, 8, 13, 6, -65, 8, 13, -65, -19, 0, 19, 8, 21, 4, -32, 3, -9, -4, -15, -3, 0, 0, -13, -15, 2, 13, -17, -2, -9, 13, -15, -17, -6, -6, 13, -13, 0, 0, -3, 0, -25, -27, -25, -20, -23, 3, -22, -27, -19, -16, -7, -10, -23, 3, -23, -10, -10, -13, -10, -26, -1, -4, -1, 0, 8, -1, -79, -41, -14, -12, -10, -13, 0, 0, -4, -79, -46, -11, 4, -79, -28, -43, -36, -79, -11, -10, -3, -6, 7, -10, 3, 10, -79, 3, -10, 4, 1, 0, -1, 4, -10, -79, 5, 10, 1, -10, -23, -1, 5, -80, -13, -15, -2, -73, 4, -80, -13, -15, -4, -4, -80, -75, 3, -80, -10, -1, 2, -80, -15, -12, -80, -75, 3, -78, -41, -35, -50, -37, -41, -54, -43, -119, -82, -37, -37, -40, -37, -30, -14, -17, -21, -27, -18, -1, -19, -27, -28, -23, -31, -1, -27, -14, -14, -17, -14, -87, -100, -81, -92, -79, -96, -70, -100, -97, -70, -92, -82, -70, -87, -86, -81, -70, -89, -86, -100, -97, -96, -97, 69, 62, 67, 69, 64, 64, 63, 66, 68, 53, 52, -16, 68, 73, 64, 53, -16, 63, 54, -16, 49, 52, -16, 49, 67, 67, 53, 68, 67, -74, -47, -45, -43, -46, -33, -33, -37, -112, -79, -44, -29, -112, -61, -76, -69, -112, -44, -43, -36, -39, -26, -43, -30, -23, -112, -30, -43, -29, -32, -33, -34, -29, -43, -112, -75, -30, -30, -33, -30, -112, -35, -43, -29, -29, -47, -41, -43, -16, 7, 22, 25, 17, 20, 13, -62, -25, 20, 20, 17, 20, 31, 58, 60, 62, 59, 72, 72, 68, -7, 26, 78, 61, 66, 62, 71, 60, 62, -7, 39, 62, 77, 80, 72, 75, 68, -7, 44, 29, 36, -7, 61, 72, 62, 76, 71, 0, 77, -7, 65, 58, 79, 62, -7, 58, 69, 69, -7, 75, 62, 74, 78, 66, 75, 62, 61, -7, 60, 69, 58, 76, 76, 62, 76, 7, -7, 41, 69, 62, 58, 76, 62, 5, -7, 60, 65, 62, 60, 68, -7, 37, 72, 64, 28, 58, 77, -7, 72, 78, 77, 73, 78, 77, -7, 63, 72, 75, -7, 77, 58, 64, -7, -2, 76, 7, -7, 44, 62, 62, -7, 70, 72, 75, 62, 19, -7, 65, 77, 77, 73, 76, 19, 8, 8, 61, 62, 79, 62, 69, 72, 73, 62, 75, 76, 7, 63, 58, 60, 62, 59, 72, 72, 68, 7, 60, 72, 70, 8, 61, 72, 60, 76, 8, 58, 78, 61, 66, 62, 71, 60, 62, 6, 71, 62, 77, 80, 72, 75, 68, 8, 58, 71, 61, 75, 72, 66, 61, 8, -7, -70, -67, -40, -70, -59, -53, -66, -70, -67, -46, -40, -52, -51, -70, -53, -51, -66, -67};
    }

    static {
        A01();
    }

    AdErrorType(int i, String str, boolean z) {
        this.A00 = i;
        this.A01 = str;
        this.A02 = z;
    }

    public static AdErrorType adErrorTypeFromCode(int i) {
        return adErrorTypeFromCode(i, UNKNOWN_ERROR);
    }

    /* JADX WARN: Code restructure failed: missing block: B:29:0x0030, code lost:            return r4;     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public static com.facebook.ads.internal.protocol.AdErrorType adErrorTypeFromCode(int r5, com.facebook.ads.internal.protocol.AdErrorType r6) {
        /*
            r4 = 0
            r0 = 0
            r0 = 0
            r0 = 0
            com.facebook.ads.internal.protocol.AdErrorType[] r3 = values()
            int r2 = r3.length
            r1 = 0
            r0 = 2
        Lb:
            switch(r0) {
                case 2: goto Lf;
                case 3: goto L15;
                case 4: goto L2c;
                case 5: goto L23;
                case 6: goto L27;
                default: goto Le;
            }
        Le:
            goto Lb
        Lf:
            if (r1 >= r2) goto L13
            r0 = 3
            goto Lb
        L13:
            r0 = 6
            goto Lb
        L15:
            com.facebook.ads.internal.protocol.AdErrorType[] r3 = (com.facebook.ads.internal.protocol.AdErrorType[]) r3
            r4 = r3[r1]
            int r0 = r4.getErrorCode()
            if (r0 != r5) goto L21
            r0 = 4
            goto Lb
        L21:
            r0 = 5
            goto Lb
        L23:
            int r1 = r1 + 1
            r0 = 2
            goto Lb
        L27:
            com.facebook.ads.internal.protocol.AdErrorType r6 = (com.facebook.ads.internal.protocol.AdErrorType) r6
            r4 = r6
            r0 = 4
            goto Lb
        L2c:
            com.facebook.ads.internal.protocol.AdErrorType r4 = (com.facebook.ads.internal.protocol.AdErrorType) r4
            com.facebook.ads.internal.protocol.AdErrorType r4 = (com.facebook.ads.internal.protocol.AdErrorType) r4
            return r4
        */
        throw new UnsupportedOperationException("Method not decompiled: com.facebook.ads.internal.protocol.AdErrorType.adErrorTypeFromCode(int, com.facebook.ads.internal.protocol.AdErrorType):com.facebook.ads.internal.protocol.AdErrorType");
    }

    public String getDefaultErrorMessage() {
        return this.A01;
    }

    public int getErrorCode() {
        return this.A00;
    }

    public boolean isPublicError() {
        return this.A02;
    }
}
