package com.facebook.ads.redexgen.X;

/* renamed from: com.facebook.ads.redexgen.X.Gu, reason: case insensitive filesystem */
/* loaded from: assets/audience_network.dex */
public enum EnumC0431Gu {
    A0C(A00(501, 20, 52)),
    A07(A00(532, 18, 127)),
    A03(A00(755, 15, 121)),
    A0G(A00(1420, 13, 30)),
    A0F(A00(945, 13, 22)),
    A0X(A00(442, 14, 71)),
    A0S(A00(192, 10, 4)),
    A05(A00(820, 9, 48)),
    A06(A00(655, 16, 102)),
    A0c(A00(641, 14, 19)),
    A0b(A00(1215, 11, 70)),
    A0U(A00(617, 10, 38)),
    A0H(A00(164, 16, 17)),
    A0e(A00(899, 14, 102)),
    A0d(A00(143, 21, 93)),
    A0V(A00(721, 16, 62)),
    A0I(A00(1350, 11, 21)),
    A0W(A00(1400, 20, 28)),
    A0T(A00(1296, 16, 15)),
    A0R(A00(1141, 14, 80)),
    A0l(A00(102, 14, 104)),
    A0g(A00(521, 11, 36)),
    A0f(A00(1034, 15, 50)),
    A0h(A00(1013, 10, 98)),
    A0j(A00(380, 10, 116)),
    A0i(A00(1203, 12, 11)),
    A0k(A00(1312, 24, 106)),
    A0a(A00(850, 8, 50)),
    A0Z(A00(1185, 9, 118)),
    A0Y(A00(230, 17, 122)),
    A0m(A00(212, 18, 60)),
    A04(A00(881, 18, 62)),
    A09(A00(425, 17, 5)),
    A0B(A00(69, 33, 89)),
    A0A(A00(1155, 30, 52)),
    A08(A00(271, 11, 11)),
    A0D(A00(858, 23, 94)),
    A0E(A00(467, 26, 28)),
    A0J(A00(603, 14, 28)),
    A0O(A00(770, 20, 27)),
    A0N(A00(456, 11, 112)),
    A0Q(A00(302, 19, 125)),
    A0L(A00(0, 25, 69)),
    A0K(A00(976, 23, 103)),
    A0P(A00(737, 18, 15)),
    A0M(A00(1226, 12, 97));

    public static byte[] A01;
    public final String A00;

    /* JADX WARN: Code restructure failed: missing block: B:18:0x0030, code lost:            return new java.lang.String(r2);     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public static java.lang.String A00(int r2, int r3, int r4) {
        /*
            r0 = 0
            r0 = 0
            byte[] r1 = com.facebook.ads.redexgen.X.EnumC0431Gu.A01
            int r0 = r2 + r3
            byte[] r2 = java.util.Arrays.copyOfRange(r1, r2, r0)
            r1 = 0
            r0 = 2
        Lc:
            switch(r0) {
                case 2: goto L10;
                case 3: goto L19;
                case 4: goto L27;
                default: goto Lf;
            }
        Lf:
            goto Lc
        L10:
            byte[] r2 = (byte[]) r2
            int r0 = r2.length
            if (r1 >= r0) goto L17
            r0 = 3
            goto Lc
        L17:
            r0 = 4
            goto Lc
        L19:
            byte[] r2 = (byte[]) r2
            r0 = r2[r1]
            r0 = r0 ^ r4
            r0 = r0 ^ 33
            byte r0 = (byte) r0
            r2[r1] = r0
            int r1 = r1 + 1
            r0 = 2
            goto Lc
        L27:
            byte[] r2 = (byte[]) r2
            java.lang.String r0 = new java.lang.String
            r0.<init>(r2)
            java.lang.String r0 = (java.lang.String) r0
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.facebook.ads.redexgen.X.EnumC0431Gu.A00(int, int, int):java.lang.String");
    }

    public static void A01() {
        A01 = new byte[]{0, 23, 8, 59, 13, 10, 16, 22, 11, 59, 5, 10, 13, 9, 5, 16, 13, 11, 10, 59, 1, 10, 0, 1, 0, 29, 10, 21, 6, 13, 11, 24, 23, 10, 31, 22, 11, 20, 6, 24, 10, 10, 28, 13, 10, 97, 126, 115, 114, 120, 104, 103, 123, 118, 110, 104, 103, 118, 98, 100, 114, 104, 116, 123, 126, 116, 124, 114, 115, 25, 28, 39, 10, 29, 8, 23, 10, 12, 39, 15, 16, 1, 39, 11, 29, 29, 17, 22, 31, 39, 12, 16, 17, 11, 39, 27, 20, 17, 27, 19, 29, 28, 63, 32, 45, 44, 38, 22, 57, 59, 44, 57, 40, 59, 44, 45, 102, 100, 102, 109, 96, 122, 118, 112, 102, 102, 96, 118, 118, 122, 101, 104, 105, 99, 115, 124, 126, 105, 124, 109, 126, 105, 104, 8, 11, 19, 35, 15, 8, 25, 12, 35, 31, 29, 18, 31, 25, 16, 35, 31, 16, 21, 31, 23, 83, 92, 89, 83, 91, 87, 69, 81, 66, 84, 111, 83, 92, 89, 83, 91, 64, 95, 82, 83, 89, 73, 70, 87, 67, 69, 83, 82, 76, 72, 85, 87, 64, 86, 86, 76, 74, 75, 102, 99, 100, 97, 117, 105, 102, 99, 105, 97, 107, 116, 121, 120, 114, 66, 110, 118, 116, 109, 66, 126, 113, 116, 126, 118, 120, 121, 40, 52, 46, 53, 63, 4, 57, 47, 53, 4, 43, 41, 62, 40, 40, 62, 63, 45, 47, 45, 38, 43, 49, 40, 47, 39, 34, 59, 60, 43, 4, 19, 6, 24, 4, 11, 14, 4, 12, 2, 3, 75, 78, 117, 88, 79, 90, 69, 88, 94, 79, 78, 15, 19, 9, 18, 24, 3, 30, 9, 8, 8, 19, 18, 3, 12, 14, 25, 15, 15, 25, 24, 56, 47, 48, 3, 43, 57, 62, 3, 42, 53, 57, 43, 3, 48, 51, 61, 56, 57, 56, 80, 65, 65, 78, 67, 84, 69, 68, 67, 95, 84, 85, 78, 69, 94, 78, 87, 94, 67, 84, 86, 67, 94, 68, 95, 85, 73, 76, 87, 90, 77, 88, 71, 90, 92, 87, 95, 64, 81, 87, 91, 77, 77, 65, 70, 79, 87, 92, 64, 65, 91, 87, 75, 68, 65, 75, 67, 77, 76, 35, 60, 49, 48, 58, 10, 37, 57, 52, 44, 5, 0, 5, 20, 16, 1, 22, 27, 16, 13, 9, 1, 11, 17, 16, 14, 18, 31, 7, 31, 28, 18, 27, 1, 29, 10, 31, 1, 29, 18, 23, 29, 21, 27, 26, 69, 64, 123, 86, 65, 84, 75, 86, 80, 123, 71, 72, 77, 71, 79, 65, 64, 21, 14, 9, 17, 57, 7, 2, 57, 5, 7, 10, 10, 3, 2, 53, 34, 61, 14, 34, 52, 37, 14, 36, 35, 61, 92, 77, 77, 98, 79, 88, 73, 72, 79, 83, 88, 89, 98, 73, 82, 98, 91, 82, 79, 88, 90, 79, 82, 72, 83, 89, 102, 122, 96, 123, 113, 106, 122, 123, 116, 113, 74, 103, 112, 102, 101, 122, 123, 102, 112, 74, 103, 112, 118, 112, 124, 99, 112, 113, 115, 108, 97, 96, 106, 90, 96, 119, 119, 106, 119, 63, 58, 1, 50, 49, 63, 58, 59, 58, 1, 61, 63, 50, 50, 60, 63, 61, 53, 82, 85, 79, 73, 84, 68, 88, 90, 73, 95, 68, 72, 83, 84, 76, 85, 99, 116, 107, 120, 112, 98, 101, 120, 113, 110, 98, 112, 120, 98, 117, 117, 104, 117, 52, 35, 60, 47, 39, 53, 50, 47, 38, 57, 53, 39, 47, 60, 63, 49, 52, 53, 52, 89, 88, 75, 84, 94, 88, 98, 79, 82, 73, 92, 73, 88, 89, 107, 110, 105, 108, 88, 100, 107, 110, 100, 108, 11, 0, 10, 17, 13, 15, 28, 10, 17, 29, 6, 1, 25, 0, 65, 69, 91, 66, 87, 109, 70, 93, 109, 81, 94, 91, 81, 89, 38, 35, 24, 36, 43, 40, 52, 34, 24, 36, 43, 46, 36, 44, 34, 35, 64, 69, 94, 83, 68, 81, 78, 83, 85, 94, 76, 64, 79, 64, 70, 68, 94, 81, 83, 68, 71, 82, 94, 66, 77, 72, 66, 74, 68, 69, 97, 125, 103, 124, 118, 109, 125, 116, 116, 70, 65, 90, 71, 80, 74, 86, 89, 92, 86, 94, 112, 121, 121, 64, 107, 126, 109, 120, 122, 107, 64, 124, 115, 118, 124, 116, 74, 93, 66, 113, 89, 75, 76, 113, 88, 71, 75, 89, 113, 75, 92, 92, 65, 92, 57, 60, 57, 40, 44, 61, 42, 7, 44, 49, 53, 61, 55, 45, 44, 94, 73, 86, 101, 78, 72, 91, 84, 73, 92, 85, 72, 87, 101, 91, 73, 73, 95, 78, 73, 91, 95, 66, 64, 87, 65, 65, 91, 93, 92, 83, 86, 77, 64, 87, 65, 66, 93, 92, 65, 87, 77, 64, 87, 81, 87, 91, 68, 87, 86, 112, 117, 78, 114, 125, 126, 98, 116, 117, 81, 82, 74, 90, 86, 81, 64, 85, 90, 70, 68, 75, 70, 64, 73, 90, 70, 73, 76, 70, 78, 96, 124, 102, 125, 119, 76, 124, 125, 30, 15, 15, 32, 18, 16, 9, 26, 27, 32, 11, 16, 32, 29, 30, 28, 20, 24, 13, 16, 10, 17, 27, 126, 123, 64, 124, 119, 112, 118, 124, 122, 108, 64, 124, 115, 118, 124, 116, 122, 123, 51, 48, 40, 24, 52, 51, 34, 55, 24, 36, 43, 46, 36, 44, 46, 33, 36, 46, 38, 42, 56, 44, 63, 41, 50, 46, 33, 36, 46, 38, 66, 71, 92, 64, 79, 76, 80, 70, 92, 64, 79, 74, 64, 72, 70, 71, 84, 86, 84, 95, 82, 104, 81, 86, 94, 91, 66, 69, 82, 61, 56, 35, 63, 52, 51, 53, 63, 57, 47, 35, 63, 48, 53, 63, 55, 57, 56, 34, 53, 42, 25, 35, 48, 39, 42, 51, 39, 50, 35, 25, 44, 39, 48, 39, 53, 37, 52, 47, 54, 50, 90, 
        91, 72, 87, 93, 91, 65, 76, 81, 74, 95, 74, 91, 90, 53, 42, 39, 38, 44, 28, 42, 39, 47, 38, 120, 103, 106, 107, 97, 113, 107, 124, 124, 97, 124, 101, 122, 119, 118, 124, 76, 112, 124, 126, 99, Byte.MAX_VALUE, 118, 103, 118, 119, 105, 126, 97, 114, 126, 104, 121, 114, 120, Byte.MAX_VALUE, 97, 88, 71, 74, 75, 65, 81, 94, 66, 79, 87, 114, 119, 108, 97, 118, 99, 124, 97, 103, 118, 119, 96, 123, 124, 100, 108, 114, 119, 108, 112, 114, Byte.MAX_VALUE, Byte.MAX_VALUE, 118, 119, 114, 119, 108, Byte.MAX_VALUE, 124, 114, 119, 118, 119, 108, 112, 114, Byte.MAX_VALUE, Byte.MAX_VALUE, 113, 114, 112, 120, 29, 10, 21, 6, 19, 10, 6, 28, 11, 11, 22, 11, 2, 11, 11, 18, 25, 12, 31, 10, 8, 25, 18, 14, 1, 4, 14, 6, 20, 31, 21, 46, 18, 16, 3, 21, 46, 2, 25, 30, 6, 31, 116, 113, 74, 103, 112, 101, 122, 103, 97, 74, 120, 116, 123, 116, 114, 112, 74, 101, 103, 112, 115, 102, 74, 118, 121, 124, 118, 126, 112, 113, 36, 56, 34, 57, 51, 8, 56, 49, 49, 3, 6, 29, 1, 14, 13, 17, 7, 6, 92, 67, 78, 79, 69, 117, 90, 75, 95, 89, 79, 78, 20, 19, 8, 21, 2, 56, 4, 11, 14, 4, 12, 36, 51, 44, 31, 42, 51, 31, 37, 50, 50, 47, 50, 36, 33, 58, 55, 32, 53, 42, 55, 49, 58, 38, 41, 44, 38, 46, 32, 33, 47, 62, 62, 49, 35, 33, 56, 43, 42, 49, 58, 33, 49, 44, 47, 45, 37, 41, 60, 33, 59, 32, 42, 44, 51, 62, 63, 53, 37, 41, 49, 51, 42, 37, 57, 54, 51, 57, 49, 63, 62, 71, 64, 90, 92, 65, 113, 77, 79, 92, 74, 113, 93, 70, 65, 89, 64, 61, 34, 47, 46, 36, 20, 59, 39, 42, 50, 20, 59, 42, 62, 56, 46, 20, 40, 39, 34, 40, 32, 46, 47, 61, 62, 38, 54, 58, 61, 44, 57, 54, 42, 37, 32, 42, 34, 87, 64, 85, 107, 87, 88, 93, 87, 95, 81, 80, 79, 88, 71, 84, 78, 93, 74, 71, 94, 74, 95, 78, 84, 65, 88, 60, 35, 46, 47, 37, 53, 35, 46, 38, 47, 110, 106, 116, 109, 120, 98, 105, 114, 98, 126, 113, 116, 126, 118, 77, 81, 92, 68, 92, 95, 81, 88, 98, 94, 73, 92, 98, 94, 81, 84, 94, 86, 88, 89, 92, 94, 92, 87, 90, 96, 76, 74, 92, 92, 90, 76, 76, 118, 97, 126, 109, 123, 124, 102, 96, 125, 109, 115, 124, 123, Byte.MAX_VALUE, 115, 102, 123, 125, 124, 109, 119, 124, 118, 119, 118, 17, 14, 3, 2, 8, 24, 4, 8, 10, 23, 11, 2, 19, 2, 3};
    }

    static {
        A01();
    }

    EnumC0431Gu(String str) {
        this.A00 = str;
    }

    public final String A02() {
        return this.A00;
    }
}
